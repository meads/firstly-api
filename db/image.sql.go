// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: image.sql

package db

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO image (
  data, created
) VALUES (
  $1, NOW()
)
RETURNING id, data, memo, created, updated, deleted
`

func (q *Queries) Create(ctx context.Context, data string) (Image, error) {
	row := q.db.QueryRowContext(ctx, create, data)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Data,
		&i.Memo,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM image
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, data, memo, created, updated, deleted FROM image
WHERE id = $1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Data,
		&i.Memo,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const list = `-- name: List :many
SELECT id, data, memo, created, updated, deleted FROM image LIMIT $1 OFFSET $2
`

type ListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, list, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Data,
			&i.Memo,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDelete = `-- name: SoftDelete :exec
UPDATE image
SET deleted = 1
WHERE id = $1
`

func (q *Queries) SoftDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDelete, id)
	return err
}

const update = `-- name: Update :exec
UPDATE image
SET memo = $1, updated = NOW()
WHERE id = $2
RETURNING updated
`

type UpdateParams struct {
	Memo string `json:"memo"`
	ID   int64  `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update, arg.Memo, arg.ID)
	return err
}
