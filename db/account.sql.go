// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  username, drowssap, created
) VALUES (
  $1, $2, NOW()
)
RETURNING id, username, drowssap, created, updated, deleted
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Drowssap string `json:"drowssap"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Username, arg.Drowssap)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Drowssap,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, drowssap, created, updated, deleted FROM account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Drowssap,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, username, drowssap, created, updated, deleted FROM account
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Drowssap,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, drowssap, created, updated, deleted FROM account LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Drowssap,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAccount = `-- name: SoftDeleteAccount :exec
UPDATE account
SET deleted = 1
WHERE id = $1
`

func (q *Queries) SoftDeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeleteAccount, id)
	return err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE account
SET drowssap = $1, updated = NOW()
WHERE id = $2
RETURNING updated
`

type UpdateAccountParams struct {
	Drowssap string `json:"drowssap"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount, arg.Drowssap, arg.ID)
	return err
}
